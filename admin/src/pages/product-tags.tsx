import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';
import { Search, Tag, Plus, X, Edit, Trash, Save, Filter } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface Product {
  id: number;
  uuid: string;
  name: string;
  imageUrl: string | null;
  description: string | null;
  price: string | null;
  category: string | null;
}

interface ProductTag {
  id: number;
  uuid: string;
  productId: number;
  tagType: string;
  tagValue: string;
  confidence: string | null;
  isAutoGenerated: boolean;
  source: string | null;
  createdAt: Date;
  updatedAt: Date;
}

const ProductTags = () => {
  const queryClient = useQueryClient();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [editingTagId, setEditingTagId] = useState<number | null>(null);
  const [newTag, setNewTag] = useState({ tagType: '', tagValue: '' });
  const [editTag, setEditTag] = useState({ tagType: '', tagValue: '' });
  const [tagFilter, setTagFilter] = useState('');

  // Query products
  const { data: products, isLoading: isLoadingProducts } = useQuery({
    queryKey: ['admin-products', searchQuery],
    queryFn: async () => {
      const response = await axios.get(`/api/admin/products${searchQuery ? `?q=${searchQuery}` : ''}`);
      return response.data as Product[];
    },
  });

  // Query tags for selected product
  const { data: productTags, isLoading: isLoadingTags } = useQuery({
    queryKey: ['admin-product-tags', selectedProduct?.id],
    queryFn: async () => {
      if (!selectedProduct) return [];
      const response = await axios.get(`/api/admin/products/${selectedProduct.id}/tags`);
      return response.data as ProductTag[];
    },
    enabled: !!selectedProduct,
  });

  // Add tag mutation
  const addTagMutation = useMutation({
    mutationFn: async (data: { productId: number, tagType: string, tagValue: string }) => {
      const response = await axios.post(`/api/admin/products/${data.productId}/tags`, data);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-product-tags', selectedProduct?.id] });
      setNewTag({ tagType: '', tagValue: '' });
    },
  });

  // Update tag mutation
  const updateTagMutation = useMutation({
    mutationFn: async (data: { id: number, tagType: string, tagValue: string }) => {
      const response = await axios.put(`/api/admin/tags/${data.id}`, {
        tagType: data.tagType,
        tagValue: data.tagValue
      });
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-product-tags', selectedProduct?.id] });
      setEditingTagId(null);
    },
  });

  // Delete tag mutation
  const deleteTagMutation = useMutation({
    mutationFn: async (tagId: number) => {
      const response = await axios.delete(`/api/admin/tags/${tagId}`);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-product-tags', selectedProduct?.id] });
    },
  });

  const handleSelectProduct = (product: Product) => {
    setSelectedProduct(product);
    setNewTag({ tagType: '', tagValue: '' });
    setEditingTagId(null);
  };

  const handleAddTag = () => {
    if (selectedProduct && newTag.tagType && newTag.tagValue) {
      addTagMutation.mutate({
        productId: selectedProduct.id,
        tagType: newTag.tagType,
        tagValue: newTag.tagValue
      });
    }
  };

  const handleEditTag = (tag: ProductTag) => {
    setEditingTagId(tag.id);
    setEditTag({
      tagType: tag.tagType,
      tagValue: tag.tagValue
    });
  };

  const handleSaveEdit = (tagId: number) => {
    if (editTag.tagType && editTag.tagValue) {
      updateTagMutation.mutate({
        id: tagId,
        tagType: editTag.tagType,
        tagValue: editTag.tagValue
      });
    }
  };

  const handleDeleteTag = (tagId: number) => {
    if (confirm('Are you sure you want to delete this tag?')) {
      deleteTagMutation.mutate(tagId);
    }
  };

  const filteredTags = productTags?.filter(tag => 
    !tagFilter || tag.tagType.toLowerCase().includes(tagFilter.toLowerCase())
  );

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Product Tags</h1>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Product List */}
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardTitle>Products</CardTitle>
            <div className="flex mt-4 w-full relative">
              <input
                type="text"
                placeholder="Search products..."
                className="pl-10 pr-4 py-2 border rounded-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <Search className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
            </div>
          </CardHeader>
          <CardContent>
            {isLoadingProducts ? (
              <div className="text-center p-4">Loading products...</div>
            ) : (
              <div className="max-h-[60vh] overflow-y-auto">
                <ul className="divide-y">
                  {products?.map((product) => (
                    <li 
                      key={product.id}
                      className={`p-3 hover:bg-gray-50 cursor-pointer ${selectedProduct?.id === product.id ? 'bg-blue-50' : ''}`}
                      onClick={() => handleSelectProduct(product)}
                    >
                      <div className="flex items-center">
                        {product.imageUrl && (
                          <img 
                            src={product.imageUrl} 
                            alt={product.name} 
                            className="w-12 h-12 object-cover rounded mr-3" 
                          />
                        )}
                        <div>
                          <h3 className="font-medium text-sm">{product.name}</h3>
                          <p className="text-sm text-gray-500 truncate">{product.price || 'No price'}</p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Tags Section */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>
                {selectedProduct ? `Tags for: ${selectedProduct.name}` : 'Select a Product'}
              </CardTitle>
              {selectedProduct && (
                <div className="flex items-center space-x-2">
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="Filter by tag type..."
                      className="pl-9 pr-4 py-1.5 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      value={tagFilter}
                      onChange={(e) => setTagFilter(e.target.value)}
                    />
                    <Filter className="absolute left-2.5 top-1.5 h-4 w-4 text-gray-400" />
                    {tagFilter && (
                      <button
                        onClick={() => setTagFilter('')}
                        className="absolute right-2.5 top-1.5"
                      >
                        <X className="h-4 w-4 text-gray-400" />
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>
          </CardHeader>
          <CardContent>
            {!selectedProduct ? (
              <div className="text-center py-10 text-gray-500">
                <Tag className="h-12 w-12 mx-auto text-gray-300 mb-3" />
                <p>Select a product to manage its tags</p>
              </div>
            ) : isLoadingTags ? (
              <div className="text-center p-4">Loading tags...</div>
            ) : (
              <div>
                {/* Add new tag form */}
                <div className="mb-6 p-4 bg-gray-50 rounded-md">
                  <h3 className="font-medium mb-3 flex items-center">
                    <Plus className="mr-2 h-4 w-4" />
                    Add New Tag
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <input
                      type="text"
                      placeholder="Tag Type (e.g. color, material)"
                      className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      value={newTag.tagType}
                      onChange={(e) => setNewTag({ ...newTag, tagType: e.target.value })}
                    />
                    <input
                      type="text"
                      placeholder="Tag Value (e.g. red, cotton)"
                      className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      value={newTag.tagValue}
                      onChange={(e) => setNewTag({ ...newTag, tagValue: e.target.value })}
                    />
                  </div>
                  <button
                    className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
                    onClick={handleAddTag}
                    disabled={!newTag.tagType || !newTag.tagValue || addTagMutation.isPending}
                  >
                    {addTagMutation.isPending ? 'Adding...' : 'Add Tag'}
                  </button>
                </div>

                {/* Tags list */}
                {filteredTags?.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <p>No tags found for this product</p>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Confidence</th>
                          <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {filteredTags?.map((tag) => (
                          <tr key={tag.id}>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {editingTagId === tag.id ? (
                                <input
                                  type="text"
                                  className="w-full px-2 py-1 border rounded-md"
                                  value={editTag.tagType}
                                  onChange={(e) => setEditTag({ ...editTag, tagType: e.target.value })}
                                />
                              ) : (
                                <span className="text-sm font-medium">{tag.tagType}</span>
                              )}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {editingTagId === tag.id ? (
                                <input
                                  type="text"
                                  className="w-full px-2 py-1 border rounded-md"
                                  value={editTag.tagValue}
                                  onChange={(e) => setEditTag({ ...editTag, tagValue: e.target.value })}
                                />
                              ) : (
                                <span className="text-sm">{tag.tagValue}</span>
                              )}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              <span className={`text-xs px-2 py-1 rounded-full ${tag.isAutoGenerated ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}`}>
                                {tag.isAutoGenerated ? 'AI' : 'Manual'}
                              </span>
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {tag.confidence ? (
                                <div className="w-24 bg-gray-200 rounded-full h-2">
                                  <div 
                                    className="bg-green-500 h-2 rounded-full" 
                                    style={{ width: `${parseFloat(tag.confidence) * 100}%` }}
                                  ></div>
                                </div>
                              ) : (
                                <span className="text-xs text-gray-500">N/A</span>
                              )}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap text-right text-sm font-medium">
                              {editingTagId === tag.id ? (
                                <div className="flex justify-end space-x-2">
                                  <button
                                    onClick={() => handleSaveEdit(tag.id)}
                                    className="text-green-600 hover:text-green-900"
                                  >
                                    <Save className="h-4 w-4" />
                                  </button>
                                  <button
                                    onClick={() => setEditingTagId(null)}
                                    className="text-gray-600 hover:text-gray-900"
                                  >
                                    <X className="h-4 w-4" />
                                  </button>
                                </div>
                              ) : (
                                <div className="flex justify-end space-x-2">
                                  <button
                                    onClick={() => handleEditTag(tag)}
                                    className="text-blue-600 hover:text-blue-900"
                                    disabled={tag.isAutoGenerated}
                                  >
                                    <Edit className={`h-4 w-4 ${tag.isAutoGenerated ? 'opacity-50 cursor-not-allowed' : ''}`} />
                                  </button>
                                  <button
                                    onClick={() => handleDeleteTag(tag.id)}
                                    className="text-red-600 hover:text-red-900"
                                  >
                                    <Trash className="h-4 w-4" />
                                  </button>
                                </div>
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ProductTags;