import { useState, useEffect } from 'react'
import { Search, Filter, Tag, Plus, Edit, Trash, Save, X } from 'lucide-react'
import axios from 'axios'

// Interface for product tag data
interface ProductTag {
  id: number
  productId: number
  productName: string
  tagType: string
  tagValue: string
  confidence: string | null
  isAutoGenerated: boolean
  source: string | null
  createdAt: string
}

interface EditTagState {
  id: number
  tagType: string
  tagValue: string
}

const ProductTags = () => {
  const [tags, setTags] = useState<ProductTag[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [filterType, setFilterType] = useState<string>('')
  const [page, setPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [editingTag, setEditingTag] = useState<EditTagState | null>(null)
  const [newTag, setNewTag] = useState<{
    productId: number;
    tagType: string;
    tagValue: string;
  } | null>(null)

  // Fetch product tags
  useEffect(() => {
    const fetchTags = async () => {
      try {
        setLoading(true)
        const response = await axios.get('/api/admin/product-tags', {
          params: {
            page,
            limit: 10,
            search: searchQuery || undefined,
            type: filterType || undefined
          },
          withCredentials: true
        })

        setTags(response.data.tags)
        setTotalPages(response.data.totalPages)
        setError(null)
      } catch (err) {
        console.error('Error fetching product tags:', err)
        setError('Failed to load product tags. Please try again later.')
      } finally {
        setLoading(false)
      }
    }

    fetchTags()
  }, [page, searchQuery, filterType])

  // Placeholder tags for development
  const placeholderTags: ProductTag[] = [
    {
      id: 1,
      productId: 101,
      productName: 'Wireless Headphones',
      tagType: 'category',
      tagValue: 'Electronics',
      confidence: '0.98',
      isAutoGenerated: true,
      source: 'OpenAI',
      createdAt: '2025-05-10T14:30:00Z'
    },
    {
      id: 2,
      productId: 101,
      productName: 'Wireless Headphones',
      tagType: 'feature',
      tagValue: 'Bluetooth',
      confidence: '0.95',
      isAutoGenerated: true,
      source: 'OpenAI',
      createdAt: '2025-05-10T14:30:10Z'
    },
    {
      id: 3,
      productId: 101,
      productName: 'Wireless Headphones',
      tagType: 'feature',
      tagValue: 'Noise Cancellation',
      confidence: '0.92',
      isAutoGenerated: true,
      source: 'OpenAI',
      createdAt: '2025-05-10T14:30:20Z'
    },
    {
      id: 4,
      productId: 101,
      productName: 'Wireless Headphones',
      tagType: 'audience',
      tagValue: 'Music Lovers',
      confidence: '0.89',
      isAutoGenerated: true,
      source: 'OpenAI',
      createdAt: '2025-05-10T14:30:30Z'
    },
    {
      id: 5,
      productId: 102,
      productName: 'Bluetooth Speaker',
      tagType: 'category',
      tagValue: 'Electronics',
      confidence: '0.97',
      isAutoGenerated: true,
      source: 'OpenAI',
      createdAt: '2025-05-11T09:15:00Z'
    },
    {
      id: 6,
      productId: 102,
      productName: 'Bluetooth Speaker',
      tagType: 'feature',
      tagValue: 'Waterproof',
      confidence: '0.93',
      isAutoGenerated: true,
      source: 'OpenAI',
      createdAt: '2025-05-11T09:15:10Z'
    },
    {
      id: 7,
      productId: 102,
      productName: 'Bluetooth Speaker',
      tagType: 'occasion',
      tagValue: 'Outdoor Activities',
      confidence: '0.85',
      isAutoGenerated: false,
      source: 'Manual',
      createdAt: '2025-05-11T09:15:20Z'
    }
  ]

  // Use placeholder data in development
  const displayTags = tags.length > 0 ? tags : placeholderTags

  // Tag type options
  const tagTypes = ['category', 'feature', 'audience', 'occasion', 'interest', 'style']

  // Handlers
  const handleSearch = (event: React.FormEvent) => {
    event.preventDefault()
    setPage(1) // Reset to first page when searching
  }

  const handleEdit = (tag: ProductTag) => {
    setEditingTag({
      id: tag.id,
      tagType: tag.tagType,
      tagValue: tag.tagValue
    })
  }

  const handleSaveEdit = async () => {
    if (!editingTag) return
    
    try {
      // API call to update tag
      await axios.put(`/api/admin/product-tags/${editingTag.id}`, {
        tagType: editingTag.tagType,
        tagValue: editingTag.tagValue
      }, {
        withCredentials: true
      })
      
      // Update local state
      setTags(tags.map(tag => 
        tag.id === editingTag.id 
          ? { ...tag, tagType: editingTag.tagType, tagValue: editingTag.tagValue } 
          : tag
      ))
      
      setEditingTag(null)
    } catch (err) {
      console.error('Error updating tag:', err)
      setError('Failed to update tag. Please try again.')
    }
  }

  const handleCancelEdit = () => {
    setEditingTag(null)
  }

  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this tag?')) return
    
    try {
      // API call to delete tag
      await axios.delete(`/api/admin/product-tags/${id}`, {
        withCredentials: true
      })
      
      // Update local state
      setTags(tags.filter(tag => tag.id !== id))
    } catch (err) {
      console.error('Error deleting tag:', err)
      setError('Failed to delete tag. Please try again.')
    }
  }

  const handleAddNewTag = () => {
    setNewTag({
      productId: 0,
      tagType: 'category',
      tagValue: ''
    })
  }

  const handleSaveNewTag = async () => {
    if (!newTag || !newTag.productId || !newTag.tagValue) return
    
    try {
      // API call to create tag
      const response = await axios.post('/api/admin/product-tags', newTag, {
        withCredentials: true
      })
      
      // Update local state with new tag from response
      setTags([response.data, ...tags])
      setNewTag(null)
    } catch (err) {
      console.error('Error creating tag:', err)
      setError('Failed to create tag. Please try again.')
    }
  }

  const handleCancelNewTag = () => {
    setNewTag(null)
  }

  // Format date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold">Product Tags</h1>
        <p className="text-muted-foreground">Manage and edit product tag metadata</p>
      </div>

      {error && (
        <div className="rounded-md bg-destructive/10 p-4 text-sm text-destructive">
          {error}
        </div>
      )}

      {/* Search and filters */}
      <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
        <form onSubmit={handleSearch} className="flex w-full md:w-auto">
          <div className="relative w-full md:w-80">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <input
              type="text"
              placeholder="Search products or tags..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full rounded-md border border-input bg-background py-2 pl-10 pr-4 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            />
          </div>
          <button
            type="submit"
            className="ml-2 rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/30"
          >
            Search
          </button>
        </form>

        <div className="flex items-center space-x-2">
          <div className="flex items-center">
            <Filter className="mr-2 h-4 w-4 text-muted-foreground" />
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="rounded-md border border-input bg-background p-2 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            >
              <option value="">All tag types</option>
              {tagTypes.map((type) => (
                <option key={type} value={type}>
                  {type.charAt(0).toUpperCase() + type.slice(1)}
                </option>
              ))}
            </select>
          </div>

          <button
            onClick={handleAddNewTag}
            className="flex items-center rounded-md bg-primary px-3 py-2 text-sm font-medium text-primary-foreground hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/30"
          >
            <Plus className="mr-1 h-4 w-4" />
            Add Tag
          </button>
        </div>
      </div>

      {/* Tags table */}
      <div className="rounded-lg border border-border">
        <div className="overflow-x-auto">
          <table className="w-full divide-y divide-border">
            <thead className="bg-muted">
              <tr>
                <th className="whitespace-nowrap px-4 py-3.5 text-left text-sm font-medium text-foreground">
                  Product
                </th>
                <th className="whitespace-nowrap px-4 py-3.5 text-left text-sm font-medium text-foreground">
                  Tag Type
                </th>
                <th className="whitespace-nowrap px-4 py-3.5 text-left text-sm font-medium text-foreground">
                  Tag Value
                </th>
                <th className="whitespace-nowrap px-4 py-3.5 text-left text-sm font-medium text-foreground">
                  Confidence
                </th>
                <th className="whitespace-nowrap px-4 py-3.5 text-left text-sm font-medium text-foreground">
                  Source
                </th>
                <th className="whitespace-nowrap px-4 py-3.5 text-left text-sm font-medium text-foreground">
                  Created
                </th>
                <th className="whitespace-nowrap px-4 py-3.5 text-center text-sm font-medium text-foreground">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-border bg-card">
              {/* New tag form */}
              {newTag && (
                <tr className="bg-muted/20">
                  <td className="whitespace-nowrap px-4 py-2 text-sm">
                    <input
                      type="number"
                      placeholder="Product ID"
                      value={newTag.productId || ''}
                      onChange={(e) => setNewTag({ ...newTag, productId: parseInt(e.target.value) || 0 })}
                      className="w-full rounded-md border border-input bg-background p-1.5 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
                    />
                  </td>
                  <td className="whitespace-nowrap px-4 py-2 text-sm">
                    <select
                      value={newTag.tagType}
                      onChange={(e) => setNewTag({ ...newTag, tagType: e.target.value })}
                      className="w-full rounded-md border border-input bg-background p-1.5 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
                    >
                      {tagTypes.map((type) => (
                        <option key={type} value={type}>
                          {type.charAt(0).toUpperCase() + type.slice(1)}
                        </option>
                      ))}
                    </select>
                  </td>
                  <td className="whitespace-nowrap px-4 py-2 text-sm">
                    <input
                      type="text"
                      placeholder="Tag value"
                      value={newTag.tagValue}
                      onChange={(e) => setNewTag({ ...newTag, tagValue: e.target.value })}
                      className="w-full rounded-md border border-input bg-background p-1.5 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
                    />
                  </td>
                  <td className="whitespace-nowrap px-4 py-2 text-sm">-</td>
                  <td className="whitespace-nowrap px-4 py-2 text-sm">Manual</td>
                  <td className="whitespace-nowrap px-4 py-2 text-sm">-</td>
                  <td className="whitespace-nowrap px-4 py-2 text-center text-sm">
                    <div className="flex justify-center space-x-2">
                      <button
                        onClick={handleSaveNewTag}
                        className="rounded-md bg-primary p-1.5 text-primary-foreground hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/30"
                        title="Save"
                      >
                        <Save className="h-4 w-4" />
                      </button>
                      <button
                        onClick={handleCancelNewTag}
                        className="rounded-md bg-destructive p-1.5 text-destructive-foreground hover:bg-destructive/90 focus:outline-none focus:ring-2 focus:ring-destructive/30"
                        title="Cancel"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              )}

              {loading ? (
                <tr>
                  <td colSpan={7} className="px-4 py-4 text-center text-sm text-muted-foreground">
                    Loading tags...
                  </td>
                </tr>
              ) : displayTags.length === 0 ? (
                <tr>
                  <td colSpan={7} className="px-4 py-4 text-center text-sm text-muted-foreground">
                    No tags found
                  </td>
                </tr>
              ) : (
                displayTags.map((tag) => (
                  <tr key={tag.id} className="hover:bg-muted/20">
                    <td className="whitespace-nowrap px-4 py-3 text-sm text-foreground">
                      {tag.productName} <span className="text-xs text-muted-foreground">#{tag.productId}</span>
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-sm">
                      {editingTag && editingTag.id === tag.id ? (
                        <select
                          value={editingTag.tagType}
                          onChange={(e) => setEditingTag({ ...editingTag, tagType: e.target.value })}
                          className="w-full rounded-md border border-input bg-background p-1.5 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
                        >
                          {tagTypes.map((type) => (
                            <option key={type} value={type}>
                              {type.charAt(0).toUpperCase() + type.slice(1)}
                            </option>
                          ))}
                        </select>
                      ) : (
                        <span className="capitalize">{tag.tagType}</span>
                      )}
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-sm">
                      {editingTag && editingTag.id === tag.id ? (
                        <input
                          type="text"
                          value={editingTag.tagValue}
                          onChange={(e) => setEditingTag({ ...editingTag, tagValue: e.target.value })}
                          className="w-full rounded-md border border-input bg-background p-1.5 text-sm text-foreground focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                      ) : (
                        <div className="flex items-center">
                          <Tag className="mr-2 h-4 w-4 text-primary" />
                          {tag.tagValue}
                        </div>
                      )}
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-sm">
                      {tag.confidence ? (
                        <div className="flex items-center">
                          <div className="h-1.5 w-16 overflow-hidden rounded-full bg-muted">
                            <div 
                              className="h-full rounded-full bg-primary"
                              style={{ width: `${parseFloat(tag.confidence) * 100}%` }}
                            ></div>
                          </div>
                          <span className="ml-2">{(parseFloat(tag.confidence) * 100).toFixed(0)}%</span>
                        </div>
                      ) : (
                        <span className="text-muted-foreground">N/A</span>
                      )}
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-sm">
                      <span className={`rounded px-2 py-0.5 text-xs font-medium ${
                        tag.isAutoGenerated ? 'bg-blue-100 text-blue-800 dark:bg-blue-800/30 dark:text-blue-300' : 'bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-300'
                      }`}>
                        {tag.source || (tag.isAutoGenerated ? 'AI' : 'Manual')}
                      </span>
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-sm text-muted-foreground">
                      {formatDate(tag.createdAt)}
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-center text-sm">
                      {editingTag && editingTag.id === tag.id ? (
                        <div className="flex justify-center space-x-2">
                          <button
                            onClick={handleSaveEdit}
                            className="rounded-md bg-primary p-1.5 text-primary-foreground hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/30"
                            title="Save"
                          >
                            <Save className="h-4 w-4" />
                          </button>
                          <button
                            onClick={handleCancelEdit}
                            className="rounded-md bg-destructive p-1.5 text-destructive-foreground hover:bg-destructive/90 focus:outline-none focus:ring-2 focus:ring-destructive/30"
                            title="Cancel"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      ) : (
                        <div className="flex justify-center space-x-2">
                          <button
                            onClick={() => handleEdit(tag)}
                            className="rounded-md bg-primary/10 p-1.5 text-primary hover:bg-primary/20 focus:outline-none focus:ring-2 focus:ring-primary/30"
                            title="Edit"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(tag.id)}
                            className="rounded-md bg-destructive/10 p-1.5 text-destructive hover:bg-destructive/20 focus:outline-none focus:ring-2 focus:ring-destructive/30"
                            title="Delete"
                          >
                            <Trash className="h-4 w-4" />
                          </button>
                        </div>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-center space-x-1">
          <button
            onClick={() => setPage(page > 1 ? page - 1 : 1)}
            disabled={page === 1}
            className="rounded-md border border-border p-2 text-sm disabled:opacity-50"
          >
            Previous
          </button>
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
            <button
              key={pageNum}
              onClick={() => setPage(pageNum)}
              className={`rounded-md p-2 text-sm ${
                pageNum === page
                  ? 'bg-primary text-primary-foreground'
                  : 'border border-border bg-background hover:bg-muted'
              }`}
            >
              {pageNum}
            </button>
          ))}
          <button
            onClick={() => setPage(page < totalPages ? page + 1 : totalPages)}
            disabled={page === totalPages}
            className="rounded-md border border-border p-2 text-sm disabled:opacity-50"
          >
            Next
          </button>
        </div>
      )}
    </div>
  )
}

export default ProductTags