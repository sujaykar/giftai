import { useState, useEffect } from 'react';
import axios from 'axios';
import { Plus, Edit, Trash, Search, Filter, Check, X } from 'lucide-react';

interface Product {
  id: number;
  name: string;
  description: string | null;
  imageUrl: string | null;
}

interface ProductTag {
  id: number;
  productId: number;
  tagType: string;
  tagValue: string;
  confidence: string | null;
  source: string | null;
  isAutoGenerated: boolean;
  createdAt: string;
}

interface GroupedTags {
  [key: string]: ProductTag[];
}

const ProductTags = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [productTags, setProductTags] = useState<ProductTag[]>([]);
  const [groupedTags, setGroupedTags] = useState<GroupedTags>({});
  const [loading, setLoading] = useState<boolean>(false);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [filterType, setFilterType] = useState<string>('');
  
  // Form state for adding/editing tags
  const [showForm, setShowForm] = useState<boolean>(false);
  const [editingTag, setEditingTag] = useState<ProductTag | null>(null);
  const [tagType, setTagType] = useState<string>('');
  const [tagValue, setTagValue] = useState<string>('');
  const [confidence, setConfidence] = useState<string>('');
  const [source, setSource] = useState<string>('manual');

  // Tag type options
  const tagTypeOptions = [
    'Category',
    'Occasion',
    'Interest',
    'Age Group',
    'Price Range',
    'Style',
    'Feature',
    'Brand',
    'Material',
    'Color'
  ];

  useEffect(() => {
    // In a real implementation, this would fetch from API
    // For now using sample data for UI development
    const fetchProducts = async () => {
      try {
        setLoading(true);
        // const { data } = await axios.get('/api/admin/products');
        // setProducts(data);
        
        // Sample data
        setProducts([
          { id: 1, name: 'Leather Wallet', description: 'Premium leather wallet with card slots', imageUrl: 'https://example.com/wallet.jpg' },
          { id: 2, name: 'Wireless Earbuds', description: 'High-quality wireless earbuds with noise cancellation', imageUrl: 'https://example.com/earbuds.jpg' },
          { id: 3, name: 'Scented Candle Set', description: 'Set of 3 scented candles in different fragrances', imageUrl: 'https://example.com/candles.jpg' },
          { id: 4, name: 'Fitness Watch', description: 'Smart fitness watch with heart rate monitor', imageUrl: 'https://example.com/watch.jpg' },
          { id: 5, name: 'Coffee Subscription', description: 'Monthly subscription of premium coffee beans', imageUrl: 'https://example.com/coffee.jpg' },
        ]);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  useEffect(() => {
    if (selectedProduct) {
      fetchProductTags(selectedProduct.id);
    }
  }, [selectedProduct]);

  useEffect(() => {
    // Group tags by type for easier display
    const grouped: GroupedTags = {};
    productTags.forEach(tag => {
      if (!grouped[tag.tagType]) {
        grouped[tag.tagType] = [];
      }
      grouped[tag.tagType].push(tag);
    });
    setGroupedTags(grouped);
  }, [productTags]);

  const fetchProductTags = async (productId: number) => {
    try {
      setLoading(true);
      // In a real implementation, this would fetch from API
      // const { data } = await axios.get(`/api/admin/products/${productId}/tags`);
      // setProductTags(data);
      
      // Sample tag data
      const sampleTags = [
        { id: 1, productId, tagType: 'Category', tagValue: 'Accessories', confidence: '0.92', source: 'AI', isAutoGenerated: true, createdAt: '2023-06-15' },
        { id: 2, productId, tagType: 'Material', tagValue: 'Leather', confidence: '0.98', source: 'AI', isAutoGenerated: true, createdAt: '2023-06-15' },
        { id: 3, productId, tagType: 'Price Range', tagValue: '$30-$50', confidence: '1.0', source: 'Manual', isAutoGenerated: false, createdAt: '2023-06-16' },
        { id: 4, productId, tagType: 'Style', tagValue: 'Minimalist', confidence: '0.87', source: 'AI', isAutoGenerated: true, createdAt: '2023-06-15' },
        { id: 5, productId, tagType: 'Occasion', tagValue: 'Birthday', confidence: '0.75', source: 'AI', isAutoGenerated: true, createdAt: '2023-06-15' },
        { id: 6, productId, tagType: 'Age Group', tagValue: 'Adult', confidence: '1.0', source: 'Manual', isAutoGenerated: false, createdAt: '2023-06-16' },
        { id: 7, productId, tagType: 'Feature', tagValue: 'Card Slots', confidence: '0.94', source: 'AI', isAutoGenerated: true, createdAt: '2023-06-15' },
        { id: 8, productId, tagType: 'Interest', tagValue: 'Fashion', confidence: '0.89', source: 'AI', isAutoGenerated: true, createdAt: '2023-06-15' },
      ];
      
      setProductTags(sampleTags);
    } catch (error) {
      console.error('Error fetching product tags:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddTag = () => {
    setEditingTag(null);
    setTagType('');
    setTagValue('');
    setConfidence('1.0');
    setSource('manual');
    setShowForm(true);
  };

  const handleEditTag = (tag: ProductTag) => {
    setEditingTag(tag);
    setTagType(tag.tagType);
    setTagValue(tag.tagValue);
    setConfidence(tag.confidence || '');
    setSource(tag.source || 'manual');
    setShowForm(true);
  };

  const handleDeleteTag = async (tagId: number) => {
    if (!confirm('Are you sure you want to delete this tag?')) return;
    
    try {
      setLoading(true);
      // In a real implementation, this would delete via API
      // await axios.delete(`/api/admin/tags/${tagId}`);
      
      // Mock deletion
      setProductTags(prevTags => prevTags.filter(tag => tag.id !== tagId));
    } catch (error) {
      console.error('Error deleting tag:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitTag = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedProduct || !tagType || !tagValue) return;
    
    try {
      setLoading(true);
      
      const tagData = {
        productId: selectedProduct.id,
        tagType,
        tagValue,
        confidence: confidence || '1.0',
        source,
        isAutoGenerated: false
      };
      
      if (editingTag) {
        // In a real implementation, this would update via API
        // await axios.put(`/api/admin/tags/${editingTag.id}`, tagData);
        
        // Mock update
        setProductTags(prevTags => 
          prevTags.map(tag => 
            tag.id === editingTag.id ? { ...tag, ...tagData } : tag
          )
        );
      } else {
        // In a real implementation, this would create via API
        // const { data } = await axios.post('/api/admin/tags', tagData);
        
        // Mock creation
        const newTag = {
          ...tagData,
          id: Math.floor(Math.random() * 1000) + 10, // Mock ID
          createdAt: new Date().toISOString().split('T')[0]
        };
        
        setProductTags(prevTags => [...prevTags, newTag as ProductTag]);
      }
      
      setShowForm(false);
    } catch (error) {
      console.error('Error saving tag:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredProducts = products.filter(product => 
    product.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredTags = filterType 
    ? Object.fromEntries(
        Object.entries(groupedTags).filter(([type]) => 
          type.toLowerCase().includes(filterType.toLowerCase())
        )
      ) 
    : groupedTags;

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Product Tags</h1>
        <p className="text-muted-foreground">
          Manage tags for products to improve recommendation accuracy
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-8">
        {/* Product List Section */}
        <div className="md:col-span-3 border rounded-lg p-4">
          <div className="mb-4">
            <h2 className="text-lg font-medium mb-2">Products</h2>
            <div className="relative">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
              <input
                type="text"
                placeholder="Search products..."
                className="pl-8 w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
          
          {loading && !filteredProducts.length ? (
            <div className="flex justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
          ) : (
            <div className="space-y-2 max-h-[600px] overflow-y-auto">
              {filteredProducts.map((product) => (
                <div
                  key={product.id}
                  className={`p-3 rounded-md cursor-pointer ${
                    selectedProduct?.id === product.id
                      ? 'bg-primary/10 border-primary'
                      : 'hover:bg-gray-100 border-transparent'
                  } border`}
                  onClick={() => setSelectedProduct(product)}
                >
                  <div className="font-medium">{product.name}</div>
                  {product.description && (
                    <p className="text-sm text-muted-foreground truncate">
                      {product.description}
                    </p>
                  )}
                </div>
              ))}
              
              {filteredProducts.length === 0 && (
                <div className="py-8 text-center text-muted-foreground">
                  No products found
                </div>
              )}
            </div>
          )}
        </div>

        {/* Tags Section */}
        <div className="md:col-span-5 border rounded-lg p-4">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-medium">
              {selectedProduct ? `Tags for ${selectedProduct.name}` : 'Select a product'}
            </h2>
            
            {selectedProduct && (
              <button
                onClick={handleAddTag}
                className="inline-flex items-center justify-center rounded-md bg-primary px-3 py-2 text-sm font-medium text-white hover:bg-primary/90"
              >
                <Plus className="mr-2 h-4 w-4" />
                Add Tag
              </button>
            )}
          </div>
          
          {selectedProduct ? (
            <>
              <div className="mb-4 relative">
                <Filter className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <input
                  type="text"
                  placeholder="Filter by tag type..."
                  className="pl-8 w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                />
              </div>
              
              {loading ? (
                <div className="flex justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                </div>
              ) : (
                <>
                  {Object.keys(filteredTags).length === 0 ? (
                    <div className="py-8 text-center text-muted-foreground">
                      {filterType ? 'No tags match the filter' : 'No tags found for this product'}
                    </div>
                  ) : (
                    <div className="space-y-6 max-h-[600px] overflow-y-auto">
                      {Object.entries(filteredTags).map(([type, tags]) => (
                        <div key={type} className="space-y-2">
                          <h3 className="text-md font-medium">{type}</h3>
                          <div className="grid gap-2">
                            {tags.map(tag => (
                              <div key={tag.id} className="flex items-center justify-between p-3 border rounded-md bg-card">
                                <div>
                                  <div className="font-medium">{tag.tagValue}</div>
                                  <div className="text-xs text-muted-foreground flex items-center mt-1">
                                    <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
                                      tag.isAutoGenerated ? 'bg-purple-100 text-purple-800' : 'bg-green-100 text-green-800'
                                    }`}>
                                      {tag.source || 'Manual'}
                                    </span>
                                    {tag.confidence && (
                                      <span className="ml-2">
                                        Confidence: {parseInt((parseFloat(tag.confidence) * 100).toString())}%
                                      </span>
                                    )}
                                  </div>
                                </div>
                                <div className="flex space-x-2">
                                  <button
                                    onClick={() => handleEditTag(tag)}
                                    className="p-1 rounded-md hover:bg-gray-100"
                                  >
                                    <Edit className="h-4 w-4 text-muted-foreground" />
                                  </button>
                                  <button
                                    onClick={() => handleDeleteTag(tag.id)}
                                    className="p-1 rounded-md hover:bg-gray-100"
                                  >
                                    <Trash className="h-4 w-4 text-red-500" />
                                  </button>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </>
              )}
            </>
          ) : (
            <div className="py-12 text-center text-muted-foreground">
              Select a product to manage its tags
            </div>
          )}
        </div>
      </div>

      {/* Add/Edit Tag Modal */}
      {showForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg w-full max-w-md p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium">
                {editingTag ? 'Edit Tag' : 'Add New Tag'}
              </h3>
              <button onClick={() => setShowForm(false)} className="text-gray-500 hover:text-gray-700">
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <form onSubmit={handleSubmitTag}>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Tag Type</label>
                  <select
                    value={tagType}
                    onChange={(e) => setTagType(e.target.value)}
                    required
                    className="w-full rounded-md border border-input bg-background px-3 py-2"
                  >
                    <option value="">Select a type</option>
                    {tagTypeOptions.map(option => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Tag Value</label>
                  <input
                    type="text"
                    value={tagValue}
                    onChange={(e) => setTagValue(e.target.value)}
                    required
                    className="w-full rounded-md border border-input bg-background px-3 py-2"
                    placeholder="Enter tag value"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Confidence (0-1)</label>
                  <input
                    type="number"
                    min="0"
                    max="1"
                    step="0.01"
                    value={confidence}
                    onChange={(e) => setConfidence(e.target.value)}
                    className="w-full rounded-md border border-input bg-background px-3 py-2"
                    placeholder="1.0"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Source</label>
                  <select
                    value={source}
                    onChange={(e) => setSource(e.target.value)}
                    className="w-full rounded-md border border-input bg-background px-3 py-2"
                  >
                    <option value="manual">Manual</option>
                    <option value="AI">AI</option>
                    <option value="Import">Import</option>
                  </select>
                </div>
                
                <div className="pt-4 flex justify-end space-x-2">
                  <button
                    type="button"
                    onClick={() => setShowForm(false)}
                    className="px-4 py-2 border rounded-md text-sm font-medium"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={loading}
                    className="px-4 py-2 bg-primary text-white rounded-md text-sm font-medium hover:bg-primary/90 flex items-center"
                  >
                    {loading ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Saving...
                      </>
                    ) : (
                      <>
                        <Check className="h-4 w-4 mr-2" />
                        Save
                      </>
                    )}
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductTags;