const { Pool } = require('pg');

// Create a connection pool outside the handler for connection reuse
let pool;

// Initialize the connection pool
const initializePool = () => {
  return new Pool({
    host: process.env.DB_HOST,
    port: parseInt(process.env.DB_PORT || '5432'),
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
    max: 20, // Maximum number of clients in the pool
    idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed
    connectionTimeoutMillis: 2000, // How long to wait for a connection
  });
};

// Helper function to execute queries with proper error handling
const executeQuery = async (query, params = []) => {
  if (!pool) {
    pool = initializePool();
  }
  
  const client = await pool.connect();
  try {
    const result = await client.query(query, params);
    return result;
  } finally {
    client.release(); // Always release the client back to the pool
  }
};

// Response helper function
const createResponse = (statusCode, body) => {
  return {
    statusCode,
    headers: {
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': '*', // For CORS support
      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type,Authorization'
    },
    body: JSON.stringify(body)
  };
};

exports.handler = async (event) => {
  console.log('Event received:', JSON.stringify(event));
  
  // Handle preflight OPTIONS requests for CORS
  if (event.httpMethod === 'OPTIONS') {
    return createResponse(200, {});
  }
  
  try {
    // Parse request details
    const operation = event.httpMethod;
    const path = event.path || '';
    const pathSegments = path.split('/').filter(segment => segment);
    const resource = pathSegments[0]; // e.g., 'users', 'products', etc.
    const resourceId = pathSegments[1]; // e.g., user ID, product ID, etc.
    const body = event.body ? JSON.parse(event.body) : {};
    
    // Validate request
    if (!resource) {
      return createResponse(400, { error: 'Resource not specified' });
    }
    
    let result;
    
    // Handle different operations
    switch(operation) {
      case 'GET':
        if (resourceId) {
          // Get specific resource by ID
          result = await executeQuery(
            `SELECT * FROM ${resource} WHERE id = $1`,
            [resourceId]
          );
        } else {
          // Get all resources with optional filtering
          const { limit = 100, offset = 0, ...filters } = event.queryStringParameters || {};
          
          // Build WHERE clause from filters
          const filterKeys = Object.keys(filters);
          const whereClause = filterKeys.length 
            ? `WHERE ${filterKeys.map((key, i) => `${key} = $${i + 1}`).join(' AND ')}`
            : '';
          
          const filterValues = Object.values(filters);
          
          result = await executeQuery(
            `SELECT * FROM ${resource} ${whereClause} LIMIT $${filterKeys.length + 1} OFFSET $${filterKeys.length + 2}`,
            [...filterValues, limit, offset]
          );
        }
        break;
        
      case 'POST':
        // Create new resource
        const columns = Object.keys(body);
        const values = Object.values(body);
        
        if (columns.length === 0) {
          return createResponse(400, { error: 'No data provided' });
        }
        
        const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');
        
        result = await executeQuery(
          `INSERT INTO ${resource} (${columns.join(', ')}) VALUES (${placeholders}) RETURNING *`,
          values
        );
        break;
        
      case 'PUT':
      case 'PATCH':
        // Update resource
        if (!resourceId) {
          return createResponse(400, { error: 'Resource ID not specified' });
        }
        
        const updateColumns = Object.keys(body);
        const updateValues = Object.values(body);
        
        if (updateColumns.length === 0) {
          return createResponse(400, { error: 'No update data provided' });
        }
        
        const setClause = updateColumns.map((col, i) => `${col} = $${i + 1}`).join(', ');
        
        result = await executeQuery(
          `UPDATE ${resource} SET ${setClause} WHERE id = $${updateColumns.length + 1} RETURNING *`,
          [...updateValues, resourceId]
        );
        break;
        
      case 'DELETE':
        // Delete resource
        if (!resourceId) {
          return createResponse(400, { error: 'Resource ID not specified' });
        }
        
        result = await executeQuery(
          `DELETE FROM ${resource} WHERE id = $1 RETURNING *`,
          [resourceId]
        );
        break;
        
      default:
        return createResponse(400, { error: 'Unsupported operation' });
    }
    
    // Check if resource was found for GET, PUT, DELETE operations
    if ((operation === 'GET' || operation === 'PUT' || operation === 'PATCH' || operation === 'DELETE') 
        && resourceId && result.rowCount === 0) {
      return createResponse(404, { error: `${resource} with ID ${resourceId} not found` });
    }
    
    return createResponse(
      operation === 'POST' ? 201 : 200,
      { data: result.rows }
    );
    
  } catch (err) {
    console.error('Database operation error:', err);
    
    // Handle specific database errors
    if (err.code === '42P01') {
      return createResponse(400, { error: `Table '${err.table}' does not exist` });
    } else if (err.code === '23505') {
      return createResponse(409, { error: 'Duplicate key violation' });
    } else if (err.code === '23503') {
      return createResponse(400, { error: 'Foreign key constraint violation' });
    }
    
    return createResponse(500, { error: 'Internal server error', message: err.message });
  }
};
